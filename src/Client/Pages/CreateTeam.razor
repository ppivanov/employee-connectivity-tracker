@page "/create-team"

@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using System.Text

@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject IControllerConnection apiConn

<AuthorizeView>
    <Authorized>
        <div class="create-team">
            @if (!initialized)
            {
                <p>Loading...</p>
            }
            else
            {
                if (!isAdmin)
                {
                    <p>You do not have access to this page. Click <a href="/">here</a> to go back.</p>
                }
                else
                {
                    <EditForm Model=teamDetails OnValidSubmit=@SendTeamData Context="formContext">
                        <DataAnnotationsValidator />
                        <ValidationSummary style="color: red" />

                        @if (String.IsNullOrEmpty(ServerMessage) == false)
                        {
                            <div class="operation-result">
                                <p style="@ServerMessageInlineStyle">@ServerMessage</p>
                            </div>
                        }

                        <div class="left-half">
                            <div class="create-team-input-pair">
                                <label>Team name</label>
                                <InputText @bind-Value=teamDetails.Name class="form-control" id="Name" />

                            </div>
                            <div class="create-team-input-pair">
                                <label>Team lead</label>
                                <select @bind=teamDetails.LeaderEmail>
                                    @if (AvailableLeaders.Count == 0)
                                    {
                                        <option value="" disabled>No available users</option>
                                    }
                                    else
                                    {
                                        <option value="">---</option>
                                        @foreach (var user in AvailableLeaders)
                                        {
                                            <option value="@user">@user</option>
                                        }
                                    }
                                    }
                                </select>
                            </div>
                            <div class="create-team-input-pair">
                                <label>Available users</label>
                                <select @bind=CurrentMemberSelection>
                                    @if (AvailableMembers.Count == 0)
                                    {
                                        <option value="" disabled>No available users</option>
                                    }
                                    else
                                    {
                                        <option value="">---</option>
                                        @foreach (var user in AvailableMembers)
                                        {
                                            <option value="@user">@user</option>
                                        }
                                    }
                                </select>
                                <button type="button" @onclick="() => AddSelectedMember()" disabled=@isSubmitting class="select-member">Add member</button>
                            </div>
                        </div>
                        <table class="selected-members">
                            <thead>
                                <tr>
                                    <td>
                                        Selected members
                                    </td>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var member in teamDetails.MemberEmails)
                                {
                                    <tr>
                                        <td>
                                            @member
                                            <button class="deselect-btn" @onclick="() => RemoveFromSelected(member)">Remove</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <button type="submit" disabled=@isSubmitting class="save-team">Save</button>
                    </EditForm>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    EctTeamRequestDetails teamDetails = new EctTeamRequestDetails();
    string CurrentMemberSelection { get; set; }
    string ServerMessage { get; set; } = "";
    string ServerMessageInlineStyle
    {
        get
        {
            var style = new StringBuilder("text-align: center;");
            var textColor = serverMessageIsError ? "color: red;" : "color: green;";
            style.Append(textColor);

            return style.ToString();
        }
    }
    HashSet<string>
                MembersFromApi { get; set; }
    HashSet<string>
        AvailableLeaders { get; set; }
    HashSet<string>
        AvailableMembers
    {
        get
        {
            var selectableMembers = AvailableLeaders.ToHashSet();                                   // Copy the available set of members
            selectableMembers.Remove(teamDetails.LeaderEmail);                                      // Remove the selected leader
            return selectableMembers;
        }
    }

    bool isAdmin = false;
    bool isSubmitting = false;
    bool initialized = false;
    bool serverMessageIsError = false;

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("setPageTitle", "Create Team");
        isAdmin = await apiConn.IsProcessingUserAnAdmin(Http);
        if (isAdmin)
        {
            await GetUserEmails();
            teamDetails.MemberEmails = new List<string>();
        }
        initialized = true;
    }

    private async Task AddSelectedMember()
    {
        if (string.IsNullOrEmpty(CurrentMemberSelection))
            return;

        if (CurrentMemberSelection.Equals("-"))
            return;

        if (CurrentMemberSelection.Equals(teamDetails.LeaderEmail))
            return;

        if (teamDetails.MemberEmails.Contains(CurrentMemberSelection))
            return;

        teamDetails.MemberEmails.Add(CurrentMemberSelection);
        AvailableLeaders.Remove(CurrentMemberSelection);
        await InvokeAsync(StateHasChanged);
    }

    protected async Task GetUserEmails()
    {
        var token = await apiConn.GetAPITokenAsync();
        if (token != null)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var response = await Http.GetFromJsonAsync<IEnumerable<string>>($"api/auth/get-app-users");
                MembersFromApi = response.ToHashSet();
                AvailableLeaders = MembersFromApi.ToHashSet();                                     // Copy the set not the reference
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private async Task RemoveFromSelected(string member)
    {
        teamDetails.MemberEmails.Remove(member);
        AvailableLeaders.Add(member);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendTeamData()
    {
        if (isSubmitting)
            return;

        isSubmitting = true;
        var token = await apiConn.GetAPITokenAsync();
        if (token != null)
        {
            try
            {
                teamDetails.MemberEmails = teamDetails.MemberEmails;

                var json = JsonConvert.SerializeObject(teamDetails);
                StringContent data = new StringContent(json, Encoding.UTF8, "application/json");

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var response = await Http.PostAsync("api/team/create-team", data);
                Console.WriteLine(await response.Content.ReadAsStringAsync());
                serverMessageIsError = (response.IsSuccessStatusCode == false);
                ServerMessage = await response.Content.ReadAsStringAsync();

                resetInputFields();
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            finally
            {
                isSubmitting = false;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private void resetInputFields()
    {
        teamDetails.Name = "";
        teamDetails.LeaderEmail = "";
        teamDetails.MemberEmails = new List<string>();
    }
}
