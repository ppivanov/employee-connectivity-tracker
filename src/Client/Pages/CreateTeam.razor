@page "/create-team"

@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using System.Text

@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject IControllerConnection graphProvider

<AuthorizeView>
    <Authorized>
        @*TODO - Add extra validations to ensure user is admin*@
        <div class="create-team">
            <h2 class="create-team-heading">Create Team</h2>
            @if (!initialized)
            {
                <p>Loading...</p>
            }
            else
            {
                <EditForm Model=teamDetails OnValidSubmit=@SendTeamData Context="formContext">
                    <div class="left-half">
                        <div class="create-team-input-pair">
                            <label>Team name</label>
                            <InputText @bind-Value=teamDetails.Name class="form-control" id="Name" />
                        </div>
                        <div class="create-team-input-pair">
                            <label>Team lead</label>
                            <select @bind=teamDetails.LeaderEmail>
                                @if (availableLeaders.Count == 0)
                                {
                                    <option value="" disabled>No available users</option>
                                }
                                else
                                {
                                    <option value="">---</option>
                                    @foreach (var user in availableLeaders)
                                    {
                                        <option value="@user">@user</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="create-team-input-pair">
                            <select @bind=currentMemberSelection>
                                @if (availableMembers.Count == 0)
                                {
                                    <option value="" disabled>No available users</option>
                                }
                                else
                                {
                                    <option value="">---</option>
                                    @foreach (var user in availableMembers)
                                    {
                                        <option value="@user">@user</option>
                                    }
                                }
                            </select>
                            <button type="button" @onclick="() => AddSelectedMember()" disabled=@isSubmitting class="select-member">Add member</button>
                        </div>
                    </div>
                    <table class="selected-members">
                        <thead>
                            <tr>
                                <td>
                                    Member email
                                </td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var member in selectedMembers)
                            {
                                <tr>
                                    <td>
                                        @member
                                        <button class="deselect-btn" @onclick="() => RemoveFromSelected(member)">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <button type="submit" disabled=@isSubmitting class="save-team">Save</button>
                </EditForm>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    EctTeamRequestDetails teamDetails = new EctTeamRequestDetails();
    string currentMemberSelection { get; set; }
    List<string> selectedMembers { get; set; }
    HashSet<string> membersFromApi { get; set; }
    HashSet<string> availableLeaders { get; set; }
    HashSet<string> availableMembers
    {
        get
        {
            var selectableMembers = availableLeaders.ToHashSet();                                  // Copy the available set of members
            selectableMembers.Remove(teamDetails.LeaderEmail);                                      // Remove the selected leader
            return selectableMembers;
        }
    }

    bool isSubmitting = false;
    bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("setPageTitle", "Dashboard");
        await GetUserEmails();
        selectedMembers = new List<string>();

        initialized = true;
    }

    private async Task AddSelectedMember()
    {
        if (string.IsNullOrEmpty(currentMemberSelection))
            return;

        if (currentMemberSelection.Equals("-"))
            return;

        if (currentMemberSelection.Equals(teamDetails.LeaderEmail))
            return;

        if (selectedMembers.Contains(currentMemberSelection))
            return;

        selectedMembers.Add(currentMemberSelection);
        availableLeaders.Remove(currentMemberSelection);
        await InvokeAsync(StateHasChanged);
    }

    protected async Task GetUserEmails()
    {
        var token = await graphProvider.GetAPITokenAsync();
        if (token != null)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var response = await Http.GetFromJsonAsync<IEnumerable<string>>($"api/auth/get-app-users");
                membersFromApi = response.ToHashSet();
                availableLeaders = membersFromApi.ToHashSet();                                     // Copy the set not the reference
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private async Task RemoveFromSelected(string member)
    {
        selectedMembers.Remove(member);
        availableLeaders.Add(member);
        await InvokeAsync(StateHasChanged);
    }

    private async Task SendTeamData()
    {
        if (isSubmitting)
            return;

        isSubmitting = true;
        var token = await graphProvider.GetAPITokenAsync();
        if (token != null)
        {
            try
            {
                teamDetails.MemberEmails = selectedMembers;

                var json = JsonConvert.SerializeObject(teamDetails);
                StringContent data = new StringContent(json, Encoding.UTF8, "application/json");

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var response = await Http.PostAsync("api/team/create-team", data);
                Console.WriteLine(await response.Content.ReadAsStringAsync());
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Team saved successfully");
                }
                else
                {
                    // TODO - display error
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            finally
            {
                isSubmitting = false;
            }
        }
    }

}
