@page "/"
@page "/dashboard"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using EctBlazorApp.Shared
@using System.Net.Http.Headers
@*@attribute [Authorize]*@
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime jsRuntime
@inject ICalendarEventsProvider eventsProvider

<AuthorizeView>
    <Authorized>
        <h1 class="navigation">Dashboard</h1>
        <button @onclick="SyncWithMicrosoftGraph">Sync</button>
        <button @onclick="GetCalendarEventsInDateRange">Retrieve</button>
        <button @onclick="(e=> GetUserDetails(context.User.GetUserEmail()))">UserDetails</button>
    </Authorized>
    <NotAuthorized>
        <h2>Welcome to Employee Connectivity Tracker</h2>
        <p>Please, <a href="authentication/login">Log in</a> to continue</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeAsync<string>("setPageTitle", "Dashboard");
    }

    protected async Task GetCalendarEventsInDateRange()
    {
        DateTime fromDate = DateTime.Now.AddDays(1);
        DateTime toDate = fromDate.AddDays(2);

        string queryString = $"fromDate={fromDate.ToString("yyyy-MM-dd")}&toDate={toDate.ToString("yyyy-MM-dd")}";

        var tokenResult = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
            {
                Scopes = new[] { "api://5f468f03-5a1f-4571-9e1e-9606014e5728/API.Access" }
            });
        if (tokenResult.TryGetToken(out var token))
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                var response = await Http.GetFromJsonAsync<CalendarEvent[]>($"api/calendar/get-calendar-events?{queryString}");
                if (response.Length < 1)
                {
                    // TODO
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                // TODO - log
                exception.Redirect();
            }
        }
    }

    void UpdateDashboard()
    {
        // TODO
    }

    async Task SyncWithMicrosoftGraph()
    {
        DateTime fromDate = DateTime.Now;
        DateTime toDate = fromDate.AddDays(1);


        var events = await eventsProvider.GetEventsInDateRangeAsync(fromDate, toDate);

        @* TODO - token request, authorization header *@
        @* assignment and requests can be extracted *@
    var tokenResult = await TokenProvider.RequestAccessToken(
        new AccessTokenRequestOptions
        {
            Scopes = new[] { "api://5f468f03-5a1f-4571-9e1e-9606014e5728/API.Access" }

        });

    if (tokenResult.TryGetToken(out var token))
    {
        try
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            var response = await Http.PostAsJsonAsync<CalendarEvent[]>(
                "api/calendar/post-calendar-events",
                events.ToArray()
                );

            if (!response.IsSuccessStatusCode)
            {
                // TODO - log
                // Show error?
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            // TODO - log
            exception.Redirect();
        }
    }
}

async Task GetUserDetails(string userEmail)
{
    Console.WriteLine(await eventsProvider.GetCalendarEventsForEmail(userEmail));

        @*var tokenResult = await TokenProvider.RequestAccessToken(
                new AccessTokenRequestOptions
                {
                    Scopes = new[] {
                        "api://5f468f03-5a1f-4571-9e1e-9606014e5728/API.Access",
                        "https://graph.microsoft.com/User.Read",
                        "https://graph.microsoft.com/Calendars.Read",
                        // "https://graph.microsoft.com/CallRecords.Read.All",
                        "https://graph.microsoft.com/Chat.Read.All",
                        "https://graph.microsoft.com/Mail.Read"
                        }
                });
            if (tokenResult.TryGetToken(out var token))
            {
                try
                {
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                    var response = await Http.GetFromJsonAsync<CalendarEvent[]>($"api/calendar/get-calendar-events-api?token={token.Value}");
                    if (response.Length < 1)
                    {
                        // TODO
                    }
                }
                catch (AccessTokenNotAvailableException exception)
                {
                    // TODO - log
                    exception.Redirect();
                }
            }*@

    }
}
