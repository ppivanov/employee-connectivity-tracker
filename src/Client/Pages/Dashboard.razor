@page "/dashboard"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using EctBlazorApp.Shared
@using System.Net.Http.Headers
@attribute [Authorize]
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime jsRuntime
@inject IControllerConnection graphProvider

<AuthorizeView>
    <Authorized>
        <div class="dashboard">
            <div class="topRow">
                <div class="dateRange">
                    <h2>18 Nov - 19 Nov 2020</h2>
                    <button>Change</button>
                </div>
                <div class="textSummary">
                    <p>Emails sent: 6</p>
                    <p>Emails received: 15</p>
                    <p>Number of meetings: 5</p>
                    <p>Time in meetings: 5 hours</p>
                </div>
            </div>
            <div class="topCollaborators">
                <h2>Top Collaborators</h2>
                <div class="collaboratorsList">
                    <div class="collaborator">
                        <button @onclick="(e=> GetUserDetails(context.User.GetUserEmail()))">UpdateRecords</button>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {
    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeAsync<string>("setPageTitle", "Dashboard");
    }

    protected async Task GetCalendarEventsInDateRange()
    {
        DateTime fromDate = DateTime.Now.AddDays(1);
        DateTime toDate = fromDate.AddDays(2);

        string queryString = $"fromDate={fromDate.ToString("yyyy-MM-dd")}&toDate={toDate.ToString("yyyy-MM-dd")}";

        var tokenResult = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
            {
                Scopes = new[] { "api://5f468f03-5a1f-4571-9e1e-9606014e5728/API.Access" }
            });
        if (tokenResult.TryGetToken(out var token))
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                var response = await Http.GetFromJsonAsync<CalendarEvent[]>($"api/calendar/get-calendar-events?{queryString}");
                if (response.Length < 1)
                {
                    // TODO
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    void UpdateDashboard()
    {
        // TODO
    }

    async void GetUserDetails(string userEmail)
    {
        Console.WriteLine(await graphProvider.UpdateDatabaseRecords(userEmail));
    }
}
