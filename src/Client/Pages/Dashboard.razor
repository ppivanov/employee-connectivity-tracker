@page "/dashboard"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using EctBlazorApp.Shared
@using System.Net.Http.Headers
@attribute [Authorize]
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime jsRuntime
@inject IControllerConnection graphProvider

<AuthorizeView>
    <Authorized>
        <div class="dashboard">
            <div class="topRow">
                <div class="dateRange">
                    <h2>18 Nov - 19 Nov 2020</h2>
                    <button>Change</button>
                </div>
                <div class="textSummary">
                    <p>Emails sent: @emailsSent</p>
                    <p>Emails received: @emailsReceived</p>
                    <p>Number of meetings: @numberOfMeetings</p>
                    <p>Time in meetings: xx hours</p>
                </div>
            </div>
            <div class="topCollaborators">
                <h2>Top Collaborators</h2>
                <div class="collaboratorsList">
                    <div class="collaborator">
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int emailsSent = 0;
    private int emailsReceived = 0;
    private int numberOfMeetings = 0;

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeAsync<string>("setPageTitle", "Dashboard");
        await GetDashboardInfoForUser();
    }

    protected async Task GetDashboardInfoForUser()
    {
        DateTime fromDate = DateTime.Now.AddDays(-50);
        DateTime toDate = DateTime.Now;
        var authenticationState = await authenticationStateTask;
        string userId = authenticationState.User.GetUserEmail();

        string queryString = $"?userId={userId}&fromDate={fromDate.ToString("yyyy-MM-dd")}&toDate={toDate.ToString("yyyy-MM-dd")}";

        var tokenResult = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
            {
                Scopes = new[] { "api://5f468f03-5a1f-4571-9e1e-9606014e5728/API.Access" }
            });
        if (tokenResult.TryGetToken(out var token))
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                var response = await Http.GetFromJsonAsync<DashboardResponse>($"api/main/get-dashboard-stats{queryString}");
                emailsSent = response.SentMail.Count;
                emailsReceived = response.ReceivedMail.Count;
                numberOfMeetings = response.CalendarEvents.Count;
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    void UpdateDashboard()
    {
        // TODO
    }
}
