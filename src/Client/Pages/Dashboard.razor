@page "/dashboard"

@using BlazorDateRangePicker
@using EctBlazorApp.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@attribute [Authorize]
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime jsRuntime
@inject IControllerConnection graphProvider

<AuthorizeView>
    <Authorized>
        <div class="dashboard">
            <div class="topRow">
                <div class="dateRange">
                    <DateRangePicker @bind-StartDate="FromDate" @bind-EndDate="ToDate">
                        <ButtonsTemplate Context="pickerContext">
                            <button class="cancelBtn btn btn-sm btn-default"
                                    @onclick="@pickerContext.ClickCancel" type="button">
                                Cancel
                            </button>
                            <button class="cancelBtn btn btn-sm btn-default"
                                    @onclick="@(e => ResetClick(e, pickerContext))" type="button">
                                Reset
                            </button>
                            <button class="applyBtn btn btn-sm btn-primary" @onclick="@(e => CustomApply(e, pickerContext))"
                                    disabled="@(pickerContext.TStartDate == null || pickerContext.TEndDate == null)"
                                    type="button">
                                Apply
                            </button>
                        </ButtonsTemplate>
                    </DateRangePicker>
                </div>
                <div class="textSummary">
                    <p>Emails sent: @emailsSent</p>
                    <p>Emails received: @emailsReceived</p>
                    <p>Number of meetings: @numberOfMeetings</p>
                    <p>Time in meetings: @GetFormattedTimeInMeeting()</p>
                </div>
            </div>
            <div class="topCollaborators">
                <h2>Top Collaborators</h2>
                <div class="collaboratorsList">
                    <div class="collaborator">
                    </div>
                </div>
            </div>
            <div class="emails-chart-container">
                <div id="emails-chart"></div>
            </div>
            <div class="events-chart-container">
                <div id="events-chart"></div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private DateTimeOffset? FromDate { get; set; } = DateTimeOffset.Now;
    private DateTimeOffset? ToDate { get; set; } = DateTimeOffset.Now.AddDays(1);
    private List<SentMail> sentMail;
    private List<ReceivedMail> receivedMail;
    private List<CalendarEvent> calendarEvents;

    private int emailsSent
    {
        get
        {
            return sentMail != null ? sentMail.Count : 0;
        }
    }
    private int emailsReceived
    {
        get
        {
            return receivedMail != null ? receivedMail.Count : 0;
        }
    }
    private int numberOfMeetings = 0;
    private double secondsInMeeting = 0;

    private string GetFormattedTimeInMeeting()
    {
        TimeSpan timeSpan = TimeSpan.FromSeconds(secondsInMeeting);
        string formattedTime = $"{timeSpan.Hours} hours, {timeSpan.Minutes} minutes";
        return formattedTime;
    }

    private async Task ResetClick(MouseEventArgs e, DateRangePicker picker)
    {
        FromDate = DateTimeOffset.Now;
        ToDate = DateTimeOffset.Now.AddDays(1);
        // Close the picker
        await picker.Close();
        // Fire OnRangeSelectEvent
        await picker.OnRangeSelect.InvokeAsync(new DateRange());

        await UpdateDashboard();
    }

    private async Task CustomApply(MouseEventArgs e, DateRangePicker picker)
    {
        await picker.ClickApply(e);

        await UpdateDashboard();
    }

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("setPageTitle", "Dashboard");
        await UpdateDashboard();
    }

    protected async Task UpdateDashboard()
    {
        DateTime fromDate = FromDate.Value.Date;
        DateTime toDate = ToDate.Value.Date;
        var authenticationState = await authenticationStateTask;
        string userId = authenticationState.User.GetUserEmail();

        string queryString = $"?fromDate={fromDate.ToString("yyyy-MM-dd")}&toDate={toDate.ToString("yyyy-MM-dd")}";

        var tokenResult = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
            {
                Scopes = new[] { "api://5f468f03-5a1f-4571-9e1e-9606014e5728/API.Access" }
            });
        if (tokenResult.TryGetToken(out var token))
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                var response = await Http.GetFromJsonAsync<DashboardResponse>($"api/main/get-dashboard-stats{queryString}");
                sentMail = response.SentMail;
                receivedMail = response.ReceivedMail;
                calendarEvents = response.CalendarEvents;

                secondsInMeeting = response.SecondsInMeeting;
                numberOfMeetings = calendarEvents.Count;
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
        await jsRuntime.InvokeVoidAsync("loadGraph", (object)GetSentAndReceivedEmailData(), (object)GetCalendarEventsData());
    }

    private List<DateTime> SplitDateRangeToChunks()                                                 // These methods can be moved into their own API to allow for scaling
    {
        DateTime startDate = FromDate.Value.Date;
        DateTime endDate = ToDate.Value.Date;
        List<DateTime> dateTimeChunks = new List<DateTime>();

        while (startDate <= endDate)
        {
            dateTimeChunks.Add(startDate);
            startDate = startDate.AddDays(1);
        }

        return dateTimeChunks;
    }

    private object[][] GetSentAndReceivedEmailData()
    {
        var dates = SplitDateRangeToChunks();
        object[][] newList = new object[dates.Count + 1][];

        newList[0] = new object[] { "Date", "Sent Emails", "Received Emails" };
        for (int i = 1; i <= dates.Count; i++)
        {
            int index = i - 1;                                                                      // We add a row to the array that contains the value descriptions, but we still need the first date at position 0
            DateTime date = dates[index];
            int countOfSentMail = sentMail.Count(sm => sm.SentAt.Date == date);
            int countOfReceivedMail = receivedMail.Count(rm => rm.ReceivedAt.Date == date);

            newList[i] = new object[] { date.ToString("dd MMM"), countOfSentMail, countOfReceivedMail };
        }

        return newList;
    }

    private object[][] GetCalendarEventsData()
    {
        Dictionary<string, int> subjectAndCount = new Dictionary<string, int>();

        // loop and count using the dict
        foreach (var calendarEvent in calendarEvents)
        {
            if (subjectAndCount.ContainsKey(calendarEvent.Subject))
            {
                subjectAndCount[calendarEvent.Subject]++;
            }
            else
            {
                subjectAndCount.Add(calendarEvent.Subject, 1);
            }
        }

        object[][] newList = new object[subjectAndCount.Count + 1][];
        newList[0] = new object[] { "Event subject", "Number of events" };
        int i = 1;
        foreach (KeyValuePair<string, int> dictionaryEnty in subjectAndCount)
        {
            newList[i] = new object[] { dictionaryEnty.Key, dictionaryEnty.Value.ToString() };
            i++;
        }

        return newList;
    }
    @* Barchart data format*@
    @*[
           ['Element', 'Density', { role: 'style' }, { role: 'annotation' } ],
           ['Copper', 8.94, '#b87333', 'Cu' ],
           ['Silver', 10.49, 'silver', 'Ag' ],
           ['Gold', 19.30, 'gold', 'Au' ],
           ['Platinum', 21.45, 'color: #e5e4e2', 'Pt' ]
        ]*@
}
