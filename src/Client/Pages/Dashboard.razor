@page "/dashboard"

@using BlazorDateRangePicker
@using EctBlazorApp.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers
@attribute [Authorize]
@inject HttpClient Http
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime jsRuntime
@inject IControllerConnection graphProvider

<AuthorizeView>
    <Authorized>
        <div class="dashboard">
            <div class="topRow">
                <div class="dateRange">
                    <DateRangePicker @bind-StartDate="FromDate" @bind-EndDate="ToDate">
                        <ButtonsTemplate Context="pickerContext">
                            <button class="cancelBtn btn btn-sm btn-default"
                                    @onclick="@pickerContext.ClickCancel" type="button">
                                Cancel
                            </button>
                            <button class="cancelBtn btn btn-sm btn-default"
                                    @onclick="@(e => ResetClick(e, pickerContext))" type="button">
                                Reset
                            </button>
                            <button class="applyBtn btn btn-sm btn-primary" @onclick="@(e => CustomApply(e, pickerContext))"
                                    disabled="@(pickerContext.TStartDate == null || pickerContext.TEndDate == null)"
                                    type="button">
                                Apply
                            </button>
                        </ButtonsTemplate>
                    </DateRangePicker>
                </div>
                <div class="textSummary">
                    <p>Emails sent: @emailsSent</p>
                    <p>Emails received: @emailsReceived</p>
                    <p>Number of meetings: @numberOfMeetings</p>
                    <p>Time in meetings: @GetFormattedTimeInMeeting()</p>
                </div>
            </div>
            <div class="topCollaborators">
                <h2>Top Collaborators</h2>
                <div class="collaboratorsList">
                    <div class="collaborator">

                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private int emailsSent = 0;
    private int emailsReceived = 0;
    private int numberOfMeetings = 0;
    private double secondsInMeeting = 0;

    private string GetFormattedTimeInMeeting()
    {
        TimeSpan timeSpan = TimeSpan.FromSeconds(secondsInMeeting);
        string formattedTime = $"{timeSpan.Hours} hours, {timeSpan.Minutes} minutes";
        return formattedTime;
    }

    private DateTimeOffset? FromDate { get; set; } = DateTimeOffset.Now;
    private DateTimeOffset? ToDate { get; set; } = DateTimeOffset.Now.AddDays(1);

    private async Task ResetClick(MouseEventArgs e, DateRangePicker picker)
    {
        FromDate = DateTimeOffset.Now;
        ToDate = DateTimeOffset.Now.AddDays(1);
        // Close the picker
        await picker.Close();
        // Fire OnRangeSelectEvent
        await picker.OnRangeSelect.InvokeAsync(new DateRange());

        await UpdateDashboard();
    }

    private async Task CustomApply(MouseEventArgs e, DateRangePicker picker)
    {
        await picker.ClickApply(e);

        await UpdateDashboard();
    }

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeAsync<string>("setPageTitle", "Dashboard");
        await UpdateDashboard();
    }

    protected async Task UpdateDashboard()
    {
        DateTime fromDate = FromDate.Value.Date;
        DateTime toDate = ToDate.Value.Date;
        var authenticationState = await authenticationStateTask;
        string userId = authenticationState.User.GetUserEmail();

        string queryString = $"?fromDate={fromDate.ToString("yyyy-MM-dd")}&toDate={toDate.ToString("yyyy-MM-dd")}";

        var tokenResult = await TokenProvider.RequestAccessToken(
            new AccessTokenRequestOptions
            {
                Scopes = new[] { "api://5f468f03-5a1f-4571-9e1e-9606014e5728/API.Access" }
            });
        if (tokenResult.TryGetToken(out var token))
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                var response = await Http.GetFromJsonAsync<DashboardResponse>($"api/main/get-dashboard-stats{queryString}");
                emailsSent = response.SentMail.Count;
                emailsReceived = response.ReceivedMail.Count;
                numberOfMeetings = response.CalendarEvents.Count;
                secondsInMeeting = response.SecondsInMeeting;

                var responseTwo =await Http.GetFromJsonAsync<DashboardResponse>($"api/team/access"); 
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }
}
