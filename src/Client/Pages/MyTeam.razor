@page "/my-team"
@inherits MyTeamDashboardClass

@using BlazorDateRangePicker
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <div>

            @if (!initialized)
            {
                <p>Loading...</p>
            }
            else
            {
                if (!isLeader)
                {
                    <p>You do not have access to this page. Click <a href="/">here</a> to go back.</p>
                }
                else
                {
                    <div class="dashboard">
                        <div class="topRow">
                            <div class="dateRange">
                                <DateRangePicker @bind-StartDate="FromDate" @bind-EndDate="ToDate">
                                    <ButtonsTemplate Context="pickerContext">
                                        <button class="cancelBtn btn btn-sm btn-default"
                                                @onclick="@pickerContext.ClickCancel" type="button">
                                            Cancel
                                        </button>
                                        <button class="cancelBtn btn btn-sm btn-default"
                                                @onclick="@(e => ResetClick(e, pickerContext))" type="button">
                                            Reset
                                        </button>
                                        <button class="applyBtn btn btn-sm btn-primary" @onclick="@(e => CustomApply(e, pickerContext))"
                                                disabled="@(pickerContext.TStartDate == null || pickerContext.TEndDate == null)"
                                                type="button">
                                            Apply
                                        </button>
                                    </ButtonsTemplate>
                                </DateRangePicker>
                            </div>
                            <div class="textSummary">
                                <p>Emails sent: @emailsSent</p>
                                <p>Emails received: @emailsReceived</p>
                                <p>Number of meetings: @numberOfMeetings</p>
                                <p>Time in meetings: @FormattedTimeInMeeting</p>
                            </div>
                        </div>
                        <div class="topCollaborators">
                            <h2>Activity distribution</h2>
                            <div class="collaboratorsList">
                                <div class="collaborator">
                                    @foreach (var user in Collaborators)
                                    {
                                        <p>@user.Key (@Math.Round(user.Value, 2)%)</p> <button @onclick="() => RedirectToDasboard(user.Key)">View</button>
                                    }
                                </div>
                            </div>
                            <div class="points-threshold">
                                @if (isSubmitting)
                                {
                                    <p>Submitting, please wait.</p>
                                }
                                else
                                {
                                    @if (CurrentNotificationOptions == null)
                                    {
                                        <p>Loading current points threshold for notifications...</p>
                                    }
                                    else if (CurrentNotificationOptions.PointsThreshold == -1)
                                    {
                                        <p>There was an error fetching current notifications threshold.</p>
                                    }
                                    else
                                    {
                                        @if (string.IsNullOrEmpty(ServerMessage) == false)
                                        {
                                            <p style="@ServerMessageInlineStyle">@ServerMessage</p>
                                        }
                                        @if (allowsEdit)                                                                                                     // Edit view
                                        {
                                            <EditForm Model="NewNotificationOptions" OnSubmit="@(async () => await SubmitNotificationOptions())" Context="formContext">
                                                <label>
                                                    Threshold for notifications:
                                                    <InputNumber @bind-Value="NewNotificationOptions.PointsThreshold" class="" style="@InputStyle"
                                                                 placeholder="@($"Current: {CurrentNotificationOptions.PointsThreshold}")" />
                                                </label>
                                                <br />
                                                <label>
                                                    Margin for notifications:
                                                    <InputNumber @bind-Value="NewNotificationOptions.MarginForNotification" class="" style="@InputStyle"
                                                                 placeholder="@($"Current: {CurrentNotificationOptions.MarginForNotification}")" />%
                                                </label>

                                                <p>Users to notify:</p>
                                                <p>
                                                    <input id="userToNotify_name" list="names" 
                                                           @onchange="@(async (args) => await SetUserToNotifyName(args))" 
                                                           placeholder="John Doe" style="@AddNotifyUserInputStyle"/>
                                                    <input id="userToNotify_email" list="emails" 
                                                           @onchange="@(async (args) => await SetUserToNotifyEmail(args))" 
                                                           placeholder="email@example.com" style="@AddNotifyUserInputStyle"/>
                                                    <datalist id="names">
                                                        @foreach (var member in AvailableUsersForNotification)
                                                        {
                                                            <option value="@member.FullName"></option>
                                                        }
                                                    </datalist>
                                                    <datalist id="emails">
                                                        @foreach (var member in AvailableUsersForNotification)
                                                        {
                                                            <option value="@member.Email"></option>

                                                        }
                                                    </datalist>

                                                    <button @onclick="async () => await AddUserToNotify()" type="button">Add user</button>
                                                </p>
                                                <table>
                                                    @foreach (var nameAndEmail in NewNotificationOptions.UsersToNotify)
                                                    {
                                                        <tr>
                                                            <td>
                                                                <p>@nameAndEmail</p>
                                                            </td>
                                                            <td style="width: 100px">
                                                                @if (nameAndEmail.Equals(leaderNameAndEmail))
                                                                {
                                                                    <span class="deselect-btn"
                                                                          style="background-color: green; width: 100px;">Team lead</span>
                                                                }
                                                                else
                                                                {
                                                                    <button type="button" class="deselect-btn" style="width: 100px"
                                                                            @onclick="() => RemoveUserToNotify(nameAndEmail)">
                                                                        Remove
                                                                    </button>
                                                                }
                                                            </td>
                                                        </tr>
                                                    }
                                                </table>
                                                <br />
                                                <button type="submit">Submit</button>
                                                <button @onclick="CancelEditNotificationOptions" type="button">Cancel</button>
                                            </EditForm>
                                        }
                                        else                                                                                                                // Current notification options view
                                        {
                                            <p>Current threshold for notifications: @CurrentNotificationOptions.PointsThreshold</p>
                                            <p>Current margin for notifications: @CurrentNotificationOptions.MarginForNotification%</p>
                                            <p>Addtional users to notify:</p>
                                            <table>
                                                @foreach (var email in NewNotificationOptions.UsersToNotify)
                                                {
                                                    <tr>
                                                        <td>
                                                            <p>@email</p>
                                                        </td>
                                                    </tr>
                                                }
                                            </table>
                                            <button @onclick="EditNotificationOptions">Edit</button>
                                        }
                                    }
                                }
                            </div>
                        </div>
                        <div class="emails-chart-container">
                            <div id="emails-chart"></div>
                        </div>
                        <div class="events-chart-container">
                            <div id="events-chart"></div>
                        </div>
                    </div>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>


@code {

}
