@page "/comm-weights"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject IControllerConnection apiConn

<AuthorizeView>
    <Authorized>
        <div class="communicaiton-weights">
            @if (!initialized)
            {
                <p>Loading...</p>
            }
            else
            {
                if (!isAdmin)
                {
                    <p>You do not have access to this page. Click <a href="/">here</a> to go back.</p>
                }
                else
                {
                    <h3>Manage Communcation Mediums</h3>

                    <EditForm Model="percentages" OnSubmit="@SendWeights" Context="formContext">
                        @foreach (var medium in percentages)
                        {
                            <div class="comms-input-pair">
                                <p>@medium.Medium</p>
                            </div>
                            <div class="comms-input-pair">
                                <InputNumber @bind-Value=medium.Weight @onchange="(ChangeEventArgs changeWeight) => UpdateWeight(medium, (int)changeWeight.Value)" class="" id="Weight" />%
                            </div>
                            <button @onclick="() => RemoveMedium(medium)">Remove</button>

                            <hr />
                        }
                    </EditForm>
                    <p>Percentage left: @percentageLeft %</p>
                    <button @onclick="() => AddNewMedium()">Add</button>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    bool isAdmin = false;
    bool isSubmitting = false;
    bool initialized = false;
    bool serverMessageIsError = false;
    int percentageLeft = 0;
    List<CommunicationPercentage> percentages;

    protected override async Task OnInitializedAsync()
    {
        percentageLeft = 100;
        await jsRuntime.InvokeVoidAsync("setPageTitle", "Create Team");
        isAdmin = await apiConn.IsProcessingUserAnAdmin(Http);
        if (isAdmin)
            await GetCommunicationPercentages();

        initialized = true;
    }

    protected async Task GetCommunicationPercentages()
    {
        var token = await apiConn.GetAPITokenAsync();
        if (token != null)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                percentages = await Http.GetFromJsonAsync<List<CommunicationPercentage>>($"api/communication/weights");
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private void AddNewMedium()
    {
        percentages.Add(new CommunicationPercentage());
    }

    private void RemoveMedium(CommunicationPercentage medium)
    {
        percentages.Remove(medium);
    }

    private void UpdateWeight(CommunicationPercentage medium, int newValue)
    {
        //TODO
    }

    private void SendWeights()
    {
        isSubmitting = true;

        isSubmitting = false;
    }
}
