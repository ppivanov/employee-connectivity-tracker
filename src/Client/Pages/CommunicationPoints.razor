@page "/comm-points"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject IControllerConnection apiConn

<AuthorizeView>
    <Authorized>
        <div class="communicaiton-points">
            @if (!initialized)
            {
                <p>Loading...</p>
            }
            else
            {
                if (!isAdmin)
                {
                    <p>You do not have access to this page. Click <a href="/">here</a> to go back.</p>
                }
                else
                {
                    <h3>Manage Communcation Mediums</h3>
                    @if (string.IsNullOrEmpty(serverMessage) == false)
                    {
                        <p style="@ServerMessageInlineStyle">@serverMessage</p>
                    }
                    <EditForm Model="pointsDict" OnSubmit="@(async () => await SubmitPoints())" Context="formContext">
                        @foreach (var medium in pointsDict.Keys)
                        {
                            <div class="comms-input-pair">
                                <p>
                                    @medium.Medium
                                    @if (pointsDict[medium])
                                    {
                                        <InputNumber @bind-Value=medium.Points class="" id="Weight" style="@PointInputStyle" />
                                    }
                                    else
                                    {
                                        @medium.Points
                                    }
                                    @(medium.Points > 1 ? "points" : "point") 
                                </p>
                            </div>

                            @if (medium.Medium.Contains("Email") || medium.Medium.Contains("Meetings"))
                            {
                                @if (pointsDict[medium])
                                {
                                    <button @onclick="() => SavePercentage(medium)" type="button">Save</button>
                                }
                                else
                                {
                                    <button @onclick="() => EditPercentage(medium)" type="button">Edit</button>
                                }
                                <button @onclick="() => ClearPoints(medium)" type="button">Clear</button>
                            }
                            <hr />
                        }
                        <p><b>Note</b>: You cannot assign more than @maxPoints to a medium.</p>
                        <p>Total points: @TotalPoints</p>
                        <button type="submit" disabled="@isSubmitting">Submit</button>
                    </EditForm>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    bool isAdmin = false;
    bool isSubmitting = false;
    bool initialized = false;
    bool serverMessageIsError = false;
    string serverMessage = "";
    int maxPoints = 100;
    int TotalPoints
    {
        get
        {
            int total = 0;
            foreach (var percentage in pointsDict.Keys)
            {
                total += percentage.Points;
            }
            return total;
        }
    }
    Dictionary<CommunicationPoint, bool> pointsDict;          // holds true if user selected for edit

    protected override async Task OnInitializedAsync()
    {
        await jsRuntime.InvokeVoidAsync("setPageTitle", "Communication Points");
        isAdmin = await apiConn.IsProcessingUserAnAdmin(Http);
        if (isAdmin)
            await GetCommunicationPoints();

        initialized = true;
    }

    protected async Task GetCommunicationPoints()
    {
        var token = await apiConn.GetAPITokenAsync();
        if (token != null)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var percentages = await Http.GetFromJsonAsync<List<CommunicationPoint>>($"api/communication/points");
                InitializeDictionary(percentages);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
    }

    private void InitializeDictionary(List<CommunicationPoint> commPoints)
    {
        pointsDict = new Dictionary<CommunicationPoint, bool>();
        foreach (var medium in commPoints)
        {
            pointsDict.Add(medium, false);
        }
    }

    private bool SavePercentage(CommunicationPoint selectedMedium)
    {
        if (TotalPoints >= 0)
        {
            pointsDict[selectedMedium] = false;
            return true;
        }
        else
        {
            selectedMedium.Points += TotalPoints;
            return false;
        }
    }
    private void EditPercentage(CommunicationPoint selectedMedium)
    {
        var toggledMedium = GetToggledMedium();
        if (toggledMedium != null)
        {
            if (SavePercentage(toggledMedium))                          // If input value is less than % left only then toggle the other medium
                pointsDict[selectedMedium] = true;
        }
        else
            pointsDict[selectedMedium] = true;                          // If no previous medium is toggled

    }
    private void ClearPoints(CommunicationPoint selectedMedium)
    {
        selectedMedium.Points = 0;
    }
    private CommunicationPoint GetToggledMedium()
    {
        foreach (var medium in pointsDict.Keys)
        {
            if (pointsDict[medium])
                return medium;
        }
        return null;
    }

    private async Task SubmitPoints()
    {
        if (TotalPoints < 1)
        {
            serverMessageIsError = true;
            serverMessage = "You must assign at least one point (1 point) before submitting.";
            return;
        }
        isSubmitting = true;
        serverMessageIsError = false;

        var toggledMedium = GetToggledMedium();
        if (toggledMedium != null) pointsDict[toggledMedium] = false;

        var token = await apiConn.GetAPITokenAsync();
        if (token != null)
        {
            try
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var response = await Http.PutAsJsonAsync<List<CommunicationPoint>>($"api/communication/points/update", pointsDict.Keys.ToList());
                if (response.IsSuccessStatusCode == false)
                    serverMessageIsError = true;
                serverMessage = await response.Content.ReadAsStringAsync();
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }
        isSubmitting = false;
    }

    private string PointInputStyle
    {
        get
        {
            return TotalPoints <= 0 ? "border: 1px solid red" : "";
        }
    }
    private string ServerMessageInlineStyle
    {
        get
        {
            return serverMessageIsError ? "color: red;" : "color: green;";
        }
    }
}
